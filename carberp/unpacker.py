#! /usr/bin/env python3
from pefile import *
from itertools import cycle
import argparse, functools

def get_shellcode(pe_path, mystic_offset, mystic_size, store_to_file=False):
    xor_key = "\xcb\x81\x3d\x27"
    encrypted_shellcode = []
    with open(pe_path, 'r+b') as file:
        file.seek(mystic_offset - int(0xc00))

        while(byte := file.read(1)):
            if(file.tell() == mystic_offset -int(0xc00) + mystic_size):
                break

            encrypted_shellcode.append(byte)

        shellcode =  [ bytes([ord(a) ^ ord(b)]) for (a,b) in zip(encrypted_shellcode, cycle(xor_key)) ]

        if(store_to_file):
            with open("mystic.bin", "w+b") as bin:
                bin.write(b''.join(shellcode))

        return shellcode

def get_encoded_pe(shellcode):
    return shellcode[1581:]


def main():
    parser = argparse.ArgumentParser(description="Unpack programs packed with Mystic Compressor")
    int_16 = functools.partial(int, base=16)
    parser.add_argument("path", help="Path of the packed program")
    parser.add_argument("offset", help="Offset of the mystic compressor shellcode", type=int_16)
    parser.add_argument("size", help="Size of the Mystic Compressor shellcode", type=int_16)
    parser.add_argument("-f", "--file", help="Store mystic shellcode to file", action="store_true")
    args = parser.parse_args()
    
    shellcode = get_shellcode(args.path, args.offset, args.size, args.file)
    pe_encoded = get_encoded_pe(shellcode)
    print(pe_encoded[2])

if __name__ == "__main__":
    main()

