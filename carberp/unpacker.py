#! /usr/bin/env python3
from pefile import *
from itertools import cycle
import argparse, functools

def get_shellcode(pe_path, mystic_offset, mystic_size, store_to_file=False):
    xor_key = "\xcb\x81\x3d\x27"
    encrypted_shellcode = []
    with open(pe_path, 'r+b') as file:
        file.seek(mystic_offset - int(0xc00))

        while(byte := file.read(1)):
            if(file.tell() == mystic_offset - int(0xc00) + mystic_size):
                break

            encrypted_shellcode.append(byte)

        shellcode =  [ bytes([ord(a) ^ ord(b)]) for (a,b) in zip(encrypted_shellcode, cycle(xor_key)) ]

        if(store_to_file):
            with open("mystic.bin", "w+b") as bin:
                bin.write(b''.join(shellcode))

    return shellcode

def decode_pe(shellcode):
    encoded_pe = shellcode[1581:]
    decoded_pe = []
    check = 0x80
    enc_pos = 0
    dec_pos = 0
    carry = False

    while enc_pos != 12:
        decoded_pe.append(encoded_pe[enc_pos])
        dec_pos += 1
        enc_pos += 1
        check *= 2

        if check % 0x100 == 0:
            check = ord(encoded_pe[enc_pos])
            enc_pos += 1
            check = check * 2 + 1

        elif check > 0x100:
            carry = True
            check -= 0x100

        if not carry:
            continue
    return decoded_pe

def main():
    parser = argparse.ArgumentParser(description="Unpack executabl packed with Mystic Compressor")
    int_16 = functools.partial(int, base=16)
    parser.add_argument("path", help="Path of the packed program")
    parser.add_argument("offset", help="Offset of the mystic compressor shellcode", type=int_16)
    parser.add_argument("size", help="Size of the Mystic Compressor shellcode", type=int_16)
    parser.add_argument("-d", "--dump", help="Store mystic shellcode to file", action="store_true")
    args = parser.parse_args()
    
    shellcode = get_shellcode(args.path, args.offset, args.size, args.dump)
    pe = decode_pe(shellcode)
    print(pe)

if __name__ == "__main__":
    main()

